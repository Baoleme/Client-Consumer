<template>
  <view class="order-content card-container">
    <view class="restaurant-name">{{basket ? restaurantName : order.restaurant.name}}</view>
    <view class="divider" />
    <repeat for="{{basket ? basketArray : order.dish}}" index="index" item="item">
      <view class="item">
        <view class="left">
          <image src="{{basket ? item.item.image : item.image_url}}" mode="aspectFill" />
          <view class="name-spec">
            <view class="name">{{basket ? item.item.name : item.name}}</view>
            <view class="spec">{{basket ? item.specStr : item.specifications}}</view>
          </view>
        </view>
        <view class="right">
          <view class="count">x{{item.count}}</view>
          <view class="item-price"><span>¥</span>{{basket ? item.unitPrice : item.price}}</view>
        </view>
      </view>
      <view class="divider" />
    </repeat>
    <view class="total-price">
      <span>小计</span>
      <view class="price"><span>¥</span>{{basket ? total : order.price}}</view>
    </view>
  </view>
</template>

<style lang="scss">
  @import '../lib/var.scss';

  .order-content {
    margin-top: 18rpx;
    padding-top: 30rpx; // overrides top-padding in .card-container
    color: #606060;
    font-weight: bold;
    > .restaurant-name {
      width: 100%;
      @include line-limit;
      font-size: 24rpx;
      letter-spacing: 1.08rpx;
    }
    > .item {
      min-height: 90rpx;
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: space-between;
      > .left, > .right {
        height: 100%;
      }
      > .left {
        width: 480rpx;
        display: flex;
        align-items: center;
        font-weight: bold;
        image {
          width: 83rpx;
          height: 83rpx;
          background-color: #d8d8d8;
          border-radius: 3rpx;
        }
        > .name-spec {
          width: calc(100% - 83rpx - 17rpx);
          height: 100%;
          margin-left: 17rpx;
          > .name {
            width: 100%;
            @include line-limit;
            font-size: 28rpx;
            color: #232323;
            letter-spacing: 1.08rpx;
          }
          > .spec {
            margin-top: 15rpx;
            width: 100%;
            font-size: 24rpx;
            color: #c8c8c8;
            letter-spacing: 0.92rpx;
            word-break: break-all;
          }
        }
      }
      > .right {
        display: flex;
        align-items: center;
        justify-content: space-around;
        width: calc(100% - 480rpx - 5rpx);
        > .count {
          @include line-limit;
          width: 60rpx;
          font-size: 24rpx;
          color: #606060;
          letter-spacing: 0.92rpx;
          text-align: left;
        }
        > .item-price {
          @include line-limit;
          width: calc(100% - 60rpx - 5rpx);
          text-align: right;
          letter-spacing: 1.08rpx;
          font-size: 36rpx;
          span {
            font-size: 24rpx;
          }
        }
      }
    }
    > .total-price {
      max-width: 100%;
      display: flex;
      align-items: flex-end;
      justify-content: flex-end;
      > span {
        flex-shrink: 0;
        font-size: 24rpx;
        color: #c8c8c8;
        letter-spacing: 0.92rpx;
        margin-bottom: 8rpx;
      }
      > .price {
        @include line-limit;
        margin-left: 20rpx;
        color: #fe8966;
        letter-spacing: 1.08rpx;
        font-size: 40rpx;
        span {
          font-size: 28rpx;
        }
      }
    }
  }
</style>

<script>
import wepy from 'wepy';

import { connect } from 'wepy-redux';

// const store = getStore();

@connect({
  basketArray (state) {
    return state.menu.basket.toArray().map(v => ({
      ...v,
      item: state.menu.idMap.get(v.id)
    }));
  },
  total (state) {
    return this.basketArray
      .map(o => o.count * o.unitPrice)
      .reduce((x, acc) => x + acc, 0);
  },
  restaurantName (state) {
    if (!state.restaurant) return '';
    return state.restaurant.name;
  }
})
export default class RestaurantInfo extends wepy.component {
  props = {
    order: Object,
    basket: {
      type: String,
      default: ''
    }
  }
}
</script>
