<style lang="scss">
  @import 'lib/iconfont.scss';
  @import 'lib/var.scss';

  page {
    font-family:PingFangSC-Regular;
    height: 100%;
    background-color: #f9f9f9;
    font-size: 24rpx;
    overflow: hidden;
  }

  .container {
    overflow: hidden;
  }

  .card-container {
    width: calc(100% - 76rpx);
    background-color: #ffffff;
    padding: 30rpx 38rpx 42rpx 38rpx;
    > .divider {
      margin: 24rpx calc(44rpx - 38rpx) 20rpx calc(66rpx - 38rpx);
      width: calc(100% - (66 - 38)rpx - (44 - 38)rpx);
      height: 2rpx;
      background-color: #ededed;
    }
  }

  .head-bar {
    position: relative;
    height: $headBarHeight;
    width: 100%;
    background-color: #ffffff;
    color: #232323;
    > .back {
      position: absolute;
      left: 20rpx;
      bottom: 37rpx;
      display: flex;
      > .icon {
        transform: rotate(-90deg);
        > i {
          font-size: 20rpx;
        }
      }
      > span {
        font-size: 32rpx;
        letter-spacing: 0;
      }
    }
    > .page-title {
      position: absolute;
      width: 364rpx;
      left: 0;
      right: 0;
      bottom: 23rpx;
      margin-left: auto;
      margin-right: auto;
      font-size: 37rpx;
      text-align: center;
      font-weight: bold;
      letter-spacing: 0;
    }
  }

  .gone {
    visibility: hidden;
  }
</style>

<script>
import wepy from 'wepy';
import 'wepy-async-function';
import request from './lib/request';
import jar from './lib/cookieJar';

import { setStore } from 'wepy-redux';
import configStore from './store';

import { updateUser } from './store/actions';

const store = configStore();
setStore(store);

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/confirmOrder',
      'pages/orderDetail'
    ],
    window: {
      backgroundColor: '#f9f9f9',
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black',
      navigationStyle: 'custom'
    }
  }

  constructor () {
    super();
    this.use('requestfix');
    this.use('promisify');
  }

  async onLaunch () {
    jar.init();

    this.ensureLogin();
  }

  async ensureLogin () {
    try {
      wepy.showLoading({
        mask: true
      });

      try {
        const { data } = await request('/customer/self');
        store.dispatch(updateUser({ openid: data['openid'] }));
      } catch (err) {
        const { statusCode } = err;
        if (statusCode === 400) {
          // not logged in
          await this.login();
        } else {
          // unknown error
          // TODO: universal error handler
        }
      }
    } finally {
      wepy.hideLoading();
    }
  }

  async login () {
    const { code } = await wepy.login();
    const { data } = await request({
      url: '/customer/session',
      method: 'post',
      data: { code }
    });
    store.dispatch(updateUser({ openid: data['openid'] }));
  }
}
</script>
